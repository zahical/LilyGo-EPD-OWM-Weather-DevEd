#!python3

from PIL import Image, ImageOps
from argparse import ArgumentParser
import sys
import math



parser = ArgumentParser()
parser.add_argument('-i', action="store", dest="inputfile")
parser.add_argument('-n', action="store", dest="name")
parser.add_argument('-o', action="store", dest="outputfile")

args = parser.parse_args()

im = Image.open(args.inputfile)


# convert to grayscale
im = im.convert(mode='L')
#im.thumbnail((SCREEN_WIDTH, SCREEN_HEIGHT), Image.ANTIALIAS)

# Write out the output file.
with open(args.outputfile, 'w') as f:
    f.write("// This file was generated by the imgconvert.py script\n")
    f.write("#pragma once\n")
    f.write("#include <cstdint>\n")
    f.write("#define {}_spec {{ {}_width, {}_height, {}_data }}\n".format(args.name, args.name, args.name, args.name))
    f.write("#define {}_rect(vx,vy) {{.x = vx, .y = vy, .width = {}_width, .height = {}_height }}\n".format(args.name, args.name, args.name))
    f.write("#define {}_info(vx,vy) {}_rect(vx,vy), {}_data\n".format(args.name, args.name, args.name))
    f.write("constexpr int32_t {}_width = {};\n".format(args.name, im.size[0]))
    f.write("constexpr int32_t {}_height = {};\n".format(args.name, im.size[1]))
    f.write(
        "constexpr uint8_t {}_data[] = {{\n".format(args.name)
    )
    for y in range(0, im.size[1]):
        byte = 0
        done = True
        for x in range(0, im.size[0]):
            l = im.getpixel((x, y))
            if x % 2 == 0:
                byte = l >> 4
                done = False;
            else:
                byte |= l & 0xF0
                f.write("0x{:02X}, ".format(byte))
                done = True
        if not done:
            f.write("0x{:02X}, ".format(byte))
        f.write("\n\t");
    f.write("};\n")
